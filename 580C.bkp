#include <bits/stdc++.h>
using namespace std;

void dfs(vector<vector<long>>, vector<bool>, long, vector<bool>, long, long);

long g = 0;

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    long n, m, vb, ve;
    bool x;
    cin >> n >> m;

    vector<bool> a;

    for (long i = 0; i < n; i++) {
        cin >> x;
        a.emplace_back(x);
    }

    vector<vector<long>> t(n); 

    for (long i = 0; i < n - 1; i++) {
        cin >> vb >> ve;
        t[vb - 1].emplace_back(ve - 1);
        t[ve - 1].emplace_back(vb - 1);
    }

    vector<bool> v(n, false);
    dfs(t, a, m, v, 0, 0);
    
    cout << g << '\n';

    return 0;
}

void dfs(vector<vector<long>> t, vector<bool> a, long m, vector<bool> v, long current_node, long consecutive_cats) {

    if ((consecutive_cats + a[current_node] > m)) return;    

    bool leaf = true;

    v[current_node] = true;

    for (unsigned long i = 0; i < t[current_node].size(); i++) {
        if (!v[t[current_node][i]]) {
            leaf = false;
            dfs(t, a, m, v, t[current_node][i], (a[current_node] ? (consecutive_cats + 1) : 0));
        }
    }

    if (leaf) {
        g++;
    }
}

